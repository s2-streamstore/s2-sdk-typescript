// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies
// @generated from protobuf file "s2/v1/s2.proto" (package "s2.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Position of a record in a stream.
 *
 * @generated from protobuf message s2.v1.StreamPosition
 */
export interface StreamPosition {
    /**
     * Sequence number assigned by the service.
     *
     * @generated from protobuf field: uint64 seq_num = 1
     */
    seqNum: bigint;
    /**
     * Timestamp, which may be user-specified or assigned by the service.
     * If it is assigned by the service, it will represent milliseconds since Unix epoch.
     *
     * @generated from protobuf field: uint64 timestamp = 2
     */
    timestamp: bigint;
}
/**
 * Headers add structured information to a record as name-value pairs.
 *
 * @generated from protobuf message s2.v1.Header
 */
export interface Header {
    /**
     * Header name blob.
     * The name cannot be empty, with the exception of an S2 command record.
     *
     * @generated from protobuf field: bytes name = 1
     */
    name: Uint8Array;
    /**
     * Header value blob.
     *
     * @generated from protobuf field: bytes value = 2
     */
    value: Uint8Array;
}
/**
 * Record to be appended to a stream.
 *
 * @generated from protobuf message s2.v1.AppendRecord
 */
export interface AppendRecord {
    /**
     * Timestamp for this record.
     * Precise semantics depend on the stream's `timestamping` config.
     *
     * @generated from protobuf field: optional uint64 timestamp = 1
     */
    timestamp?: bigint;
    /**
     * Series of name-value pairs for this record.
     *
     * @generated from protobuf field: repeated s2.v1.Header headers = 2
     */
    headers: Header[];
    /**
     * Body of this record.
     *
     * @generated from protobuf field: bytes body = 3
     */
    body: Uint8Array;
}
/**
 * Payload of an Append request message.
 *
 * @generated from protobuf message s2.v1.AppendInput
 */
export interface AppendInput {
    /**
     * Batch of records to append atomically, which must contain at least one record, and no more than 1000.
     * The total size of a batch of records may not exceed 1MiB of metered bytes.
     *
     * @generated from protobuf field: repeated s2.v1.AppendRecord records = 1
     */
    records: AppendRecord[];
    /**
     * Enforce that the sequence number issued to the first record matches.
     *
     * @generated from protobuf field: optional uint64 match_seq_num = 2
     */
    matchSeqNum?: bigint;
    /**
     * Enforce a fencing token which must have been previously set by a `fence` command record.
     *
     * @generated from protobuf field: optional string fencing_token = 3
     */
    fencingToken?: string;
}
/**
 * Success response message to an Append request.
 *
 * @generated from protobuf message s2.v1.AppendAck
 */
export interface AppendAck {
    /**
     * Sequence number and timestamp of the first record that was appended.
     *
     * @generated from protobuf field: s2.v1.StreamPosition start = 1
     */
    start?: StreamPosition;
    /**
     * Sequence number of the last record that was appended + 1, and timestamp of the last record that was appended.
     * The difference between `end.seq_num` and `start.seq_num` will be the number of records appended.
     *
     * @generated from protobuf field: s2.v1.StreamPosition end = 2
     */
    end?: StreamPosition;
    /**
     * Sequence number that will be assigned to the next record on the stream, and timestamp of the last record on the stream.
     * This can be greater than the `end` position in case of concurrent appends.
     *
     * @generated from protobuf field: s2.v1.StreamPosition tail = 3
     */
    tail?: StreamPosition;
}
/**
 * Record that is durably sequenced on a stream.
 *
 * @generated from protobuf message s2.v1.SequencedRecord
 */
export interface SequencedRecord {
    /**
     * Sequence number assigned to this record.
     *
     * @generated from protobuf field: uint64 seq_num = 1
     */
    seqNum: bigint;
    /**
     * Timestamp for this record.
     *
     * @generated from protobuf field: uint64 timestamp = 2
     */
    timestamp: bigint;
    /**
     * Series of name-value pairs for this record.
     *
     * @generated from protobuf field: repeated s2.v1.Header headers = 3
     */
    headers: Header[];
    /**
     * Body of this record.
     *
     * @generated from protobuf field: bytes body = 4
     */
    body: Uint8Array;
}
/**
 * Success response message to a Read request.
 *
 * @generated from protobuf message s2.v1.ReadBatch
 */
export interface ReadBatch {
    /**
     * Records that are durably sequenced on the stream, retrieved based on the requested criteria.
     * This can only be empty in response to a unary read if the request cannot be satisfied without violating an explicit bound (`count`, `bytes`, or `until`).
     * In the context of a session, it can be empty as a heartbeat message. A heartbeat will be sent whenever a switch to following in real-time happens, and then at a randomized gap between 5 and 15 seconds if no records have become available.
     *
     * @generated from protobuf field: repeated s2.v1.SequencedRecord records = 1
     */
    records: SequencedRecord[];
    /**
     * Sequence number that will be assigned to the next record on the stream, and timestamp of the last record.
     * It will only be present when reading recent records.
     *
     * @generated from protobuf field: optional s2.v1.StreamPosition tail = 2
     */
    tail?: StreamPosition;
}
// @generated message type with reflection information, may provide speed optimized methods
class StreamPosition$Type extends MessageType<StreamPosition> {
    constructor() {
        super("s2.v1.StreamPosition", [
            { no: 1, name: "seq_num", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<StreamPosition>): StreamPosition {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seqNum = 0n;
        message.timestamp = 0n;
        if (value !== undefined)
            reflectionMergePartial<StreamPosition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamPosition): StreamPosition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 seq_num */ 1:
                    message.seqNum = reader.uint64().toBigInt();
                    break;
                case /* uint64 timestamp */ 2:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamPosition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 seq_num = 1; */
        if (message.seqNum !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.seqNum);
        /* uint64 timestamp = 2; */
        if (message.timestamp !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message s2.v1.StreamPosition
 */
export const StreamPosition = new StreamPosition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Header$Type extends MessageType<Header> {
    constructor() {
        super("s2.v1.Header", [
            { no: 1, name: "name", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Header>): Header {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = new Uint8Array(0);
        message.value = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<Header>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Header): Header {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes name */ 1:
                    message.name = reader.bytes();
                    break;
                case /* bytes value */ 2:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Header, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes name = 1; */
        if (message.name.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.name);
        /* bytes value = 2; */
        if (message.value.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message s2.v1.Header
 */
export const Header = new Header$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppendRecord$Type extends MessageType<AppendRecord> {
    constructor() {
        super("s2.v1.AppendRecord", [
            { no: 1, name: "timestamp", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "headers", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Header },
            { no: 3, name: "body", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<AppendRecord>): AppendRecord {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.headers = [];
        message.body = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<AppendRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppendRecord): AppendRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 timestamp */ 1:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                case /* repeated s2.v1.Header headers */ 2:
                    message.headers.push(Header.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bytes body */ 3:
                    message.body = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppendRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 timestamp = 1; */
        if (message.timestamp !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.timestamp);
        /* repeated s2.v1.Header headers = 2; */
        for (let i = 0; i < message.headers.length; i++)
            Header.internalBinaryWrite(message.headers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bytes body = 3; */
        if (message.body.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message s2.v1.AppendRecord
 */
export const AppendRecord = new AppendRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppendInput$Type extends MessageType<AppendInput> {
    constructor() {
        super("s2.v1.AppendInput", [
            { no: 1, name: "records", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AppendRecord },
            { no: 2, name: "match_seq_num", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "fencing_token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AppendInput>): AppendInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.records = [];
        if (value !== undefined)
            reflectionMergePartial<AppendInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppendInput): AppendInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated s2.v1.AppendRecord records */ 1:
                    message.records.push(AppendRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint64 match_seq_num */ 2:
                    message.matchSeqNum = reader.uint64().toBigInt();
                    break;
                case /* optional string fencing_token */ 3:
                    message.fencingToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppendInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated s2.v1.AppendRecord records = 1; */
        for (let i = 0; i < message.records.length; i++)
            AppendRecord.internalBinaryWrite(message.records[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 match_seq_num = 2; */
        if (message.matchSeqNum !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.matchSeqNum);
        /* optional string fencing_token = 3; */
        if (message.fencingToken !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.fencingToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message s2.v1.AppendInput
 */
export const AppendInput = new AppendInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppendAck$Type extends MessageType<AppendAck> {
    constructor() {
        super("s2.v1.AppendAck", [
            { no: 1, name: "start", kind: "message", T: () => StreamPosition },
            { no: 2, name: "end", kind: "message", T: () => StreamPosition },
            { no: 3, name: "tail", kind: "message", T: () => StreamPosition }
        ]);
    }
    create(value?: PartialMessage<AppendAck>): AppendAck {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AppendAck>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppendAck): AppendAck {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* s2.v1.StreamPosition start */ 1:
                    message.start = StreamPosition.internalBinaryRead(reader, reader.uint32(), options, message.start);
                    break;
                case /* s2.v1.StreamPosition end */ 2:
                    message.end = StreamPosition.internalBinaryRead(reader, reader.uint32(), options, message.end);
                    break;
                case /* s2.v1.StreamPosition tail */ 3:
                    message.tail = StreamPosition.internalBinaryRead(reader, reader.uint32(), options, message.tail);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppendAck, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* s2.v1.StreamPosition start = 1; */
        if (message.start)
            StreamPosition.internalBinaryWrite(message.start, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* s2.v1.StreamPosition end = 2; */
        if (message.end)
            StreamPosition.internalBinaryWrite(message.end, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* s2.v1.StreamPosition tail = 3; */
        if (message.tail)
            StreamPosition.internalBinaryWrite(message.tail, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message s2.v1.AppendAck
 */
export const AppendAck = new AppendAck$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SequencedRecord$Type extends MessageType<SequencedRecord> {
    constructor() {
        super("s2.v1.SequencedRecord", [
            { no: 1, name: "seq_num", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "headers", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Header },
            { no: 4, name: "body", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SequencedRecord>): SequencedRecord {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seqNum = 0n;
        message.timestamp = 0n;
        message.headers = [];
        message.body = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<SequencedRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SequencedRecord): SequencedRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 seq_num */ 1:
                    message.seqNum = reader.uint64().toBigInt();
                    break;
                case /* uint64 timestamp */ 2:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                case /* repeated s2.v1.Header headers */ 3:
                    message.headers.push(Header.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bytes body */ 4:
                    message.body = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SequencedRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 seq_num = 1; */
        if (message.seqNum !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.seqNum);
        /* uint64 timestamp = 2; */
        if (message.timestamp !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.timestamp);
        /* repeated s2.v1.Header headers = 3; */
        for (let i = 0; i < message.headers.length; i++)
            Header.internalBinaryWrite(message.headers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bytes body = 4; */
        if (message.body.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message s2.v1.SequencedRecord
 */
export const SequencedRecord = new SequencedRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadBatch$Type extends MessageType<ReadBatch> {
    constructor() {
        super("s2.v1.ReadBatch", [
            { no: 1, name: "records", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SequencedRecord },
            { no: 2, name: "tail", kind: "message", T: () => StreamPosition }
        ]);
    }
    create(value?: PartialMessage<ReadBatch>): ReadBatch {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.records = [];
        if (value !== undefined)
            reflectionMergePartial<ReadBatch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadBatch): ReadBatch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated s2.v1.SequencedRecord records */ 1:
                    message.records.push(SequencedRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional s2.v1.StreamPosition tail */ 2:
                    message.tail = StreamPosition.internalBinaryRead(reader, reader.uint32(), options, message.tail);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadBatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated s2.v1.SequencedRecord records = 1; */
        for (let i = 0; i < message.records.length; i++)
            SequencedRecord.internalBinaryWrite(message.records[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional s2.v1.StreamPosition tail = 2; */
        if (message.tail)
            StreamPosition.internalBinaryWrite(message.tail, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message s2.v1.ReadBatch
 */
export const ReadBatch = new ReadBatch$Type();
