// This file is auto-generated by @hey-api/openapi-ts

import { client } from './client.gen.js';
import type { Client, Options as Options2, TDataShape } from './client/index.js';
import type { AccountMetricsData, AccountMetricsErrors, AccountMetricsResponses, AppendData, AppendErrors, AppendResponses, BasinMetricsData, BasinMetricsErrors, BasinMetricsResponses, CheckTailData, CheckTailErrors, CheckTailResponses, CreateBasinData, CreateBasinErrors, CreateBasinResponses, CreateOrReconfigureBasinData, CreateOrReconfigureBasinErrors, CreateOrReconfigureBasinResponses, CreateOrReconfigureStreamData, CreateOrReconfigureStreamErrors, CreateOrReconfigureStreamResponses, CreateStreamData, CreateStreamErrors, CreateStreamResponses, DeleteBasinData, DeleteBasinErrors, DeleteBasinResponses, DeleteStreamData, DeleteStreamErrors, DeleteStreamResponses, GetBasinConfigData, GetBasinConfigErrors, GetBasinConfigResponses, GetStreamConfigData, GetStreamConfigErrors, GetStreamConfigResponses, IssueAccessTokenData, IssueAccessTokenErrors, IssueAccessTokenResponses, ListAccessTokensData, ListAccessTokensErrors, ListAccessTokensResponses, ListBasinsData, ListBasinsErrors, ListBasinsResponses, ListStreamsData, ListStreamsErrors, ListStreamsResponses, ReadData, ReadErrors, ReadResponses, ReconfigureBasinData, ReconfigureBasinErrors, ReconfigureBasinResponses, ReconfigureStreamData, ReconfigureStreamErrors, ReconfigureStreamResponses, RevokeAccessTokenData, RevokeAccessTokenErrors, RevokeAccessTokenResponses, StreamMetricsData, StreamMetricsErrors, StreamMetricsResponses } from './types.gen.js';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List access tokens.
 */
export const listAccessTokens = <ThrowOnError extends boolean = false>(options?: Options<ListAccessTokensData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListAccessTokensResponses, ListAccessTokensErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/access-tokens',
        ...options
    });
};

/**
 * Issue a new access token.
 */
export const issueAccessToken = <ThrowOnError extends boolean = false>(options: Options<IssueAccessTokenData, ThrowOnError>) => {
    return (options.client ?? client).post<IssueAccessTokenResponses, IssueAccessTokenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/access-tokens',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Revoke an access token.
 */
export const revokeAccessToken = <ThrowOnError extends boolean = false>(options: Options<RevokeAccessTokenData, ThrowOnError>) => {
    return (options.client ?? client).delete<RevokeAccessTokenResponses, RevokeAccessTokenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/access-tokens/{id}',
        ...options
    });
};

/**
 * List basins.
 */
export const listBasins = <ThrowOnError extends boolean = false>(options?: Options<ListBasinsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListBasinsResponses, ListBasinsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/basins',
        ...options
    });
};

/**
 * Create a basin.
 */
export const createBasin = <ThrowOnError extends boolean = false>(options: Options<CreateBasinData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateBasinResponses, CreateBasinErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/basins',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a basin.
 */
export const deleteBasin = <ThrowOnError extends boolean = false>(options: Options<DeleteBasinData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteBasinResponses, DeleteBasinErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/basins/{basin}',
        ...options
    });
};

/**
 * Get basin configuration.
 */
export const getBasinConfig = <ThrowOnError extends boolean = false>(options: Options<GetBasinConfigData, ThrowOnError>) => {
    return (options.client ?? client).get<GetBasinConfigResponses, GetBasinConfigErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/basins/{basin}',
        ...options
    });
};

/**
 * Reconfigure a basin.
 */
export const reconfigureBasin = <ThrowOnError extends boolean = false>(options: Options<ReconfigureBasinData, ThrowOnError>) => {
    return (options.client ?? client).patch<ReconfigureBasinResponses, ReconfigureBasinErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/basins/{basin}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create or reconfigure a basin.
 */
export const createOrReconfigureBasin = <ThrowOnError extends boolean = false>(options: Options<CreateOrReconfigureBasinData, ThrowOnError>) => {
    return (options.client ?? client).put<CreateOrReconfigureBasinResponses, CreateOrReconfigureBasinErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/basins/{basin}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Account-level metrics.
 */
export const accountMetrics = <ThrowOnError extends boolean = false>(options: Options<AccountMetricsData, ThrowOnError>) => {
    return (options.client ?? client).get<AccountMetricsResponses, AccountMetricsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metrics',
        ...options
    });
};

/**
 * Basin-level metrics.
 */
export const basinMetrics = <ThrowOnError extends boolean = false>(options: Options<BasinMetricsData, ThrowOnError>) => {
    return (options.client ?? client).get<BasinMetricsResponses, BasinMetricsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metrics/{basin}',
        ...options
    });
};

/**
 * Stream-level metrics.
 */
export const streamMetrics = <ThrowOnError extends boolean = false>(options: Options<StreamMetricsData, ThrowOnError>) => {
    return (options.client ?? client).get<StreamMetricsResponses, StreamMetricsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metrics/{basin}/{stream}',
        ...options
    });
};

/**
 * List streams.
 */
export const listStreams = <ThrowOnError extends boolean = false>(options?: Options<ListStreamsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListStreamsResponses, ListStreamsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/streams',
        ...options
    });
};

/**
 * Create a stream.
 */
export const createStream = <ThrowOnError extends boolean = false>(options: Options<CreateStreamData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateStreamResponses, CreateStreamErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/streams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a stream.
 */
export const deleteStream = <ThrowOnError extends boolean = false>(options: Options<DeleteStreamData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteStreamResponses, DeleteStreamErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/streams/{stream}',
        ...options
    });
};

/**
 * Get stream configuration.
 */
export const getStreamConfig = <ThrowOnError extends boolean = false>(options: Options<GetStreamConfigData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStreamConfigResponses, GetStreamConfigErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/streams/{stream}',
        ...options
    });
};

/**
 * Reconfigure a stream.
 */
export const reconfigureStream = <ThrowOnError extends boolean = false>(options: Options<ReconfigureStreamData, ThrowOnError>) => {
    return (options.client ?? client).patch<ReconfigureStreamResponses, ReconfigureStreamErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/streams/{stream}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create or reconfigure a stream.
 */
export const createOrReconfigureStream = <ThrowOnError extends boolean = false>(options: Options<CreateOrReconfigureStreamData, ThrowOnError>) => {
    return (options.client ?? client).put<CreateOrReconfigureStreamResponses, CreateOrReconfigureStreamErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/streams/{stream}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read records.
 */
export const read = <ThrowOnError extends boolean = false>(options: Options<ReadData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadResponses, ReadErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/streams/{stream}/records',
        ...options
    });
};

/**
 * Append records.
 */
export const append = <ThrowOnError extends boolean = false>(options: Options<AppendData, ThrowOnError>) => {
    return (options.client ?? client).post<AppendResponses, AppendErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/streams/{stream}/records',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Check the tail.
 */
export const checkTail = <ThrowOnError extends boolean = false>(options: Options<CheckTailData, ThrowOnError>) => {
    return (options.client ?? client).get<CheckTailResponses, CheckTailErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/streams/{stream}/records/tail',
        ...options
    });
};
